type Query {
  getApps(
    name: String
    onlyWithTriggers: Boolean
    onlyWithActions: Boolean
  ): [App]
  getApp(key: String!): App
  getConnectedApps(name: String): [App]
  testConnection(connectionId: String!, stepId: String): TestConnectionResult
  getFlow(id: String!): Flow
  getFlows(
    limit: Int!
    offset: Int!
    appKey: String
    connectionId: String
    name: String
  ): FlowConnection
  getStepWithTestExecutions(stepId: String!): [Step]
  getExecution(executionId: String!): Execution
  getExecutions(
    limit: Int!
    offset: Int!
    status: String
    searchInput: String
  ): ExecutionConnection
  getExecutionSteps(
    executionId: String!
    limit: Int!
    offset: Int!
  ): ExecutionStepConnection
  getDynamicData(
    stepId: String!
    key: String!
    parameters: JSONObject
  ): [JSONObject]
  # Tiles
  getTable(tableId: String!): TableMetadata!
  getTables: [TableMetadata!]!
  # Tiles rows
  getAllRows(tableId: String!): [TileRow!]!
  getCurrentUser: User
  healthcheck: AppHealth
  getPlumberStats: Stats
  # Flow transfers
  getPendingFlowTransfers: [FlowTransfer!]!
  getFlowTransferDetails(flowId: String!): [StepTransferDetails]!
}

type Mutation {
  createConnection(input: CreateConnectionInput): Connection
  generateAuthUrl(input: GenerateAuthUrlInput): AuthLink
  updateConnection(input: UpdateConnectionInput): Connection
  resetConnection(input: ResetConnectionInput): Connection
  verifyConnection(input: VerifyConnectionInput): Connection
  deleteConnection(input: DeleteConnectionInput): Boolean
  registerConnection(input: RegisterConnectionInput): Boolean
  # Flows
  createFlow(input: CreateFlowInput): Flow
  updateFlow(input: UpdateFlowInput): Flow
  updateFlowStatus(input: UpdateFlowStatusInput): Flow
  updateFlowConfig(input: UpdateFlowConfigInput): Flow
  executeFlow(input: ExecuteFlowInput): ExecuteFlowType
  deleteFlow(input: DeleteFlowInput): Boolean
  createStep(input: CreateStepInput): Step
  updateStep(input: UpdateStepInput): Step
  deleteStep(input: DeleteStepInput): Flow
  requestOtp(input: RequestOtpInput): Boolean
  verifyOtp(input: VerifyOtpInput): Boolean
  retryExecutionStep(input: RetryExecutionStepInput): Boolean
  logout: Boolean
  loginWithSgid(input: LoginWithSgidInput!): LoginWithSgidResult!
  loginWithSelectedSgid(
    input: LoginWithSelectedSgidInput!
  ): LoginWithSelectedSgidResult!
  # Tiles
  createTable(input: CreateTableInput!): TableMetadata!
  createShareableTableLink(tableId: ID!): String!
  updateTable(input: UpdateTableInput!): TableMetadata!
  deleteTable(input: DeleteTableInput!): Boolean!
  # Tiles rows
  createRow(input: CreateTableRowInput!): ID!
  createRows(input: CreateTableRowsInput!): Boolean
  updateRow(input: UpdateTableRowInput!): ID!
  deleteRows(input: DeleteTableRowsInput!): [ID!]!
  # Flow transfers
  createFlowTransfer(input: CreateFlowTransferInput!): FlowTransfer!
  updateFlowTransferStatus(input: UpdateFlowTransferStatusInput): FlowTransfer!
}

"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy(
  """
  The URL that specifies the behaviour of this scalar.
  """
  url: String!
) on SCALAR

enum FieldVisibilityOp {
  always_true
  is_empty
  equals
  not_equals
}

type FieldVisibilityCondition {
  op: FieldVisibilityOp!
  fieldKey: String
  fieldValue: String
}

type Action {
  name: String
  key: String
  description: String
  groupsLaterSteps: Boolean
  substeps: [ActionSubstep]
}

type ActionSubstep {
  key: String
  name: String
  arguments: [ActionSubstepArgument]
}

type ActionSubstepArgument {
  label: String
  key: String
  type: String
  description: String
  required: Boolean
  variables: Boolean
  variableTypes: [String]
  allowArbitrary: Boolean
  placeholder: String
  showOptionValue: Boolean
  options: [ArgumentOption]
  value: JSONObject
  source: ActionSubstepArgumentSource
  dependsOn: [String]
  hiddenIf: FieldVisibilityCondition

  # Only for multirow
  subFields: [ActionSubstepArgument]
}

type ActionSubstepArgumentSource {
  type: String
  name: String
  arguments: [ActionSubstepArgumentSourceArgument]
}

type ActionSubstepArgumentSourceArgument {
  name: String
  value: String
}

type App {
  name: String
  key: String
  connectionCount: Int
  flowCount: Int
  iconUrl: String
  docUrl: String
  authDocUrl: String
  primaryColor: String
  auth: AppAuth
  triggers: [Trigger]
  actions: [Action]
  connections: [Connection]
  description: String
}

type AppAuth {
  connectionType: String!
  connectionRegistrationType: String

  fields: [Field] # Only for user-added connections
  authenticationSteps: [AuthenticationStep]
  reconnectionSteps: [ReconnectionStep]
}

enum ArgumentEnumType {
  integer
  string
}

type AuthenticationStep {
  type: String
  name: String
  arguments: [AuthenticationStepArgument]
}

type AuthenticationStepArgument {
  name: String
  value: String
  type: ArgumentEnumType
  properties: [AuthenticationStepProperty]
}

type AuthenticationStepProperty {
  name: String
  value: String
}

type AuthLink {
  url: String
}

type Connection {
  id: String
  key: String
  formattedData: ConnectionData
  verified: Boolean
  app: App
  createdAt: String
  flowCount: Int
}

type ConnectionData {
  screenName: String
}

type ExecuteFlowType {
  data: JSONObject
  step: Step
}

type ExecutionStep {
  id: String
  executionId: String
  stepId: String
  step: Step
  appKey: String
  jobId: String
  status: String
  dataIn: JSONObject
  dataOut: JSONObject
  dataOutMetadata: JSONObject
  errorDetails: JSONObject
  createdAt: String
  updatedAt: String
  mockRun: Boolean
}

type Field {
  key: String
  label: String
  type: String
  required: Boolean
  readOnly: Boolean
  value: String
  placeholder: String
  description: String
  allowArbitrary: Boolean
  docUrl: String
  clickToCopy: Boolean
  autoComplete: String
  showOptionValue: Boolean
  options: [ArgumentOption]
}

type FlowConnection {
  edges: [FlowEdge]
  pageInfo: PageInfo
}

type FlowEdge {
  node: Flow
}

type Flow {
  id: String
  name: String
  active: Boolean
  steps: [Step]
  createdAt: String
  updatedAt: String
  config: FlowConfig
  userId: String
  pendingTransfer: FlowTransfer
}

# Rate limiting config is omitted here e.g. maxQps
type FlowConfig {
  errorConfig: FlowErrorConfig
}

type FlowErrorConfig {
  notificationFrequency: NotificationFrequency!
}

type Execution {
  id: String
  testRun: Boolean
  createdAt: String
  updatedAt: String
  status: String
  flow: Flow
}

input CreateConnectionInput {
  key: String!
  formattedData: JSONObject!
}

input GenerateAuthUrlInput {
  id: String!
}

input UpdateConnectionInput {
  id: String!
  formattedData: JSONObject!
}

input ResetConnectionInput {
  id: String!
}

input VerifyConnectionInput {
  id: String!
}

input DeleteConnectionInput {
  id: String!
}

input RegisterConnectionInput {
  connectionId: String!
  stepId: String
}

input CreateFlowInput {
  triggerAppKey: String
  connectionId: String
}

input UpdateFlowInput {
  id: String!
  name: String!
}

input UpdateFlowStatusInput {
  id: String!
  active: Boolean!
}

enum NotificationFrequency {
  once_per_day
  always
}

input UpdateFlowConfigInput {
  id: String!
  notificationFrequency: NotificationFrequency!
}

input ExecuteFlowInput {
  stepId: String!
}

input DeleteFlowInput {
  id: String!
}

input CreateStepInput {
  id: String
  previousStepId: String
  key: String
  appKey: String
  connection: StepConnectionInput
  flow: StepFlowInput
  parameters: JSONObject
  previousStep: PreviousStepInput
}

input UpdateStepInput {
  id: String
  previousStepId: String
  key: String
  appKey: String
  connection: StepConnectionInput
  flow: StepFlowInput
  parameters: JSONObject
  previousStep: PreviousStepInput
}

input DeleteStepInput {
  ids: [String!]!
}

input RequestOtpInput {
  email: String!
}

input VerifyOtpInput {
  email: String!
  otp: String!
}

input RetryExecutionStepInput {
  executionStepId: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input PreviousStepInput {
  id: String
}

type ReconnectionStep {
  type: String
  name: String
  arguments: [ReconnectionStepArgument]
}

type ReconnectionStepArgument {
  name: String
  value: String
  type: ArgumentEnumType
  properties: [ReconnectionStepProperty]
}

type ReconnectionStepProperty {
  name: String
  value: String
}

type Step {
  id: String
  previousStepId: String
  key: String
  appKey: String
  iconUrl: String
  webhookUrl: String
  type: StepEnumType
  parameters: JSONObject
  connection: Connection
  flow: Flow
  position: Int
  status: String
  executionSteps: [ExecutionStep]
}

input StepConnectionInput {
  id: String
}

enum StepEnumType {
  trigger
  action
}

input StepFlowInput {
  id: String
}

input StepInput {
  id: String
  previousStepId: String
  key: String
  appKey: String
  connection: StepConnectionInput
  flow: StepFlowInput
  parameters: JSONObject
  previousStep: PreviousStepInput
}

type Trigger {
  name: String
  key: String
  description: String
  pollInterval: Int
  type: String
  webhookTriggerInstructions: TriggerInstructions
  substeps: [TriggerSubstep]
}

type TriggerInstructions {
  beforeUrlMsg: String
  afterUrlMsg: String
  hideWebhookUrl: Boolean
  errorMsg: String
  mockDataMsg: String
}

type StepTransferDetails {
  position: Int!
  appName: String!
  connectionName: String
  instructions: String
}

type TriggerSubstep {
  key: String
  name: String
  arguments: [TriggerSubstepArgument]
}

type TriggerSubstepArgument {
  label: String
  key: String
  type: String
  description: String
  required: Boolean
  variables: Boolean
  variableTypes: [String]
  allowArbitrary: Boolean
  placeholder: String
  source: TriggerSubstepArgumentSource
  dependsOn: [String]
  showOptionValue: Boolean
  options: [ArgumentOption]
  value: JSONObject
  hiddenIf: FieldVisibilityCondition

  # Only for multirow
  subFields: [TriggerSubstepArgument]
}

type TriggerSubstepArgumentSource {
  type: String
  name: String
  arguments: [TriggerSubstepArgumentSourceArgument]
}

type ArgumentOption {
  label: String
  description: String
  value: JSONObject
}

type TriggerSubstepArgumentSourceArgument {
  name: String
  value: String
}

type TestConnectionResult {
  connectionVerified: Boolean!
  registrationVerified: Boolean
  message: String
}

type User {
  id: String
  email: String
  createdAt: String
  updatedAt: String
}

type PageInfo {
  currentPage: Int!
  totalCount: Int!
}

type ExecutionEdge {
  node: Execution
}

type ExecutionStepEdge {
  node: ExecutionStep
}

type ExecutionConnection {
  edges: [ExecutionEdge]
  pageInfo: PageInfo
}

type ExecutionStepConnection {
  edges: [ExecutionStepEdge]
  pageInfo: PageInfo
}

# Tiles types
input CreateTableInput {
  name: String!
  isBlank: Boolean!
}

input TableColumnConfigInput {
  width: Int
}

input TableColumnMetadataInput {
  id: ID!
  name: String
  position: Int
  config: TableColumnConfigInput
}

input UpdateTableInput {
  id: ID!
  name: String
  modifiedColumns: [TableColumnMetadataInput!]
  addedColumns: [String!]
  deletedColumns: [ID!]
}

input DeleteTableInput {
  id: ID!
}

type TableColumnConfig {
  width: Int
}

type TableColumnMetadata {
  id: ID!
  name: String!
  position: Int!
  config: TableColumnConfig!
}

type TableMetadata {
  id: ID!
  name: String!
  columns: [TableColumnMetadata!]
  lastAccessedAt: String!
  viewOnlyKey: String
}

# End Tiles types

# Start Tiles row types
type TileRow {
  rowId: ID!
  data: JSONObject!
}

input CreateTableRowInput {
  tableId: ID!
  data: JSONObject!
}

input CreateTableRowsInput {
  tableId: ID!
  dataArray: [JSONObject!]!
}

input UpdateTableRowInput {
  tableId: ID!
  rowId: ID!
  data: JSONObject!
}

input DeleteTableRowsInput {
  tableId: ID!
  rowIds: [ID!]!
}

# End Tiles row types

type AppHealth {
  version: String
}

type Stats {
  userCount: Int!
  executionCount: Int!
}

# Start of SGID types

type SgidPublicOfficerEmployment {
  workEmail: String
  agencyName: String
  departmentName: String
  employmentType: String
  employmentTitle: String
}

input LoginWithSgidInput {
  authCode: String!
  nonce: String!
  verifier: String!
}

type LoginWithSgidResult {
  publicOfficerEmployments: [SgidPublicOfficerEmployment!]!
}

input LoginWithSelectedSgidInput {
  workEmail: String!
}

type LoginWithSelectedSgidResult {
  success: Boolean!
}

# End of SGID types
# Start of flow transfers types

type FlowTransfer {
  id: ID!
  flowId: ID!
  oldOwnerId: ID!
  newOwnerId: ID!
  status: String!
  oldOwner: User!
  newOwner: User!
  flow: Flow!
}

input CreateFlowTransferInput {
  flowId: String!
  newOwnerEmail: String!
}

enum FlowTransferStatus {
  pending
  approved
  rejected
  cancelled
}

input UpdateFlowTransferStatusInput {
  id: String!
  status: FlowTransferStatus!
}

# End of flow transfers types

schema {
  query: Query
  mutation: Mutation
}
